<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Lazy Dev]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsby-starter-blog-demo.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 05 Jan 2020 07:27:03 GMT</lastBuildDate><item><title><![CDATA[New Beginnings]]></title><description><![CDATA[Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/new-beginnings/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/new-beginnings/</guid><pubDate>Thu, 28 May 2015 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.&lt;/p&gt;
&lt;h2&gt;On deer horse aboard tritely yikes and much&lt;/h2&gt;
&lt;p&gt;The Big Oxmox advised her not to do so, because there were thousands of bad
Commas, wild Question Marks and devious Semikoli, but the Little Blind Text
didn’t listen. She packed her seven versalia, put her initial into the belt and
made herself on the way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This however showed weasel&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Well uncritical so misled&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this is very interesting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Goodness much until that fluid owl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When she reached the first hills of the &lt;strong&gt;Italic Mountains&lt;/strong&gt;, she had a last
view back on the skyline of her hometown &lt;em&gt;Bookmarksgrove&lt;/em&gt;, the headline of
&lt;a href=&quot;http://google.com&quot;&gt;Alphabet Village&lt;/a&gt; and the subline of her own road, the Line
Lane. Pityful a rhetoric question ran over her cheek, then she continued her
way. On her way she met a copy.&lt;/p&gt;
&lt;h3&gt;Overlaid the jeepers uselessly much excluding&lt;/h3&gt;
&lt;p&gt;But nothing the copy said could convince her and so it didn’t take long until a
few insidious Copy Writers ambushed her, made her drunk with
&lt;a href=&quot;http://google.com&quot;&gt;Longe and Parole&lt;/a&gt; and dragged her into their agency, where
they abused her for their projects again and again. And if she hasn’t been
rewritten, then they are still using her.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is a paradisematic country, in which roasted parts of sentences fly into your
mouth. Even the all-powerful Pointing has no control about the blind texts it is
an almost unorthographic life One day however a small line of blind text by the
name of Lorem Ipsum decided to leave for the far World of Grammar.&lt;/p&gt;
&lt;h3&gt;According a funnily until pre-set or arrogant well cheerful&lt;/h3&gt;
&lt;p&gt;The Big Oxmox advised her not to do so, because there were thousands of bad
Commas, wild Question Marks and devious Semikoli, but the Little Blind Text
didn’t listen. She packed her seven versalia, put her initial into the belt and
made herself on the way.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;So baboon this&lt;/li&gt;
&lt;li&gt;Mounted militant weasel gregariously admonishingly straightly hey&lt;/li&gt;
&lt;li&gt;Dear foresaw hungry and much some overhung&lt;/li&gt;
&lt;li&gt;Rash opossum less because less some amid besides yikes jeepers frenetic
impassive fruitlessly shut&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When she reached the first hills of the Italic Mountains, she had a last view
back on the skyline of her hometown Bookmarksgrove, the headline of Alphabet
Village and the subline of her own road, the Line Lane. Pityful a rhetoric
question ran over her cheek, then she continued her way. On her way she met a
copy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The copy warned the Little Blind Text, that where it came from it would have
been rewritten a thousand times and everything that was left from its origin
would be the word “and” and the Little Blind Text should turn around and
return to its own, safe country.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But nothing the copy said could convince her and so it didn’t take long until a
few insidious Copy Writers ambushed her, made her drunk with Longe and Parole
and dragged her into their agency, where they abused her for their projects
again and again. And if she hasn’t been rewritten, then they are still using
her. Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts.&lt;/p&gt;
&lt;h4&gt;Silent delightfully including because before one up barring chameleon&lt;/h4&gt;
&lt;p&gt;Separated they live in Bookmarksgrove right at the coast of the Semantics, a
large language ocean. A small river named Duden flows by their place and
supplies it with the necessary regelialia. It is a paradisematic country, in
which roasted parts of sentences fly into your mouth.&lt;/p&gt;
&lt;p&gt;Even the all-powerful Pointing has no control about the blind texts it is an
almost unorthographic life One day however a small line of blind text by the
name of Lorem Ipsum decided to leave for the far World of Grammar. The Big Oxmox
advised her not to do so, because there were thousands of bad Commas, wild
Question Marks and devious Semikoli, but the Little Blind Text didn’t listen.&lt;/p&gt;
&lt;h5&gt;Wherever far wow thus a squirrel raccoon jeez jaguar this from along&lt;/h5&gt;
&lt;p&gt;She packed her seven versalia, put her initial into the belt and made herself on
the way. When she reached the first hills of the Italic Mountains, she had a
last view back on the skyline of her hometown Bookmarksgrove, the headline of
Alphabet Village and the subline of her own road, the Line Lane. Pityful a
rhetoric question ran over her cheek, then she continued her way. On her way she
met a copy.&lt;/p&gt;
&lt;h6&gt;Slapped cozy a that lightheartedly and far&lt;/h6&gt;
&lt;p&gt;The copy warned the Little Blind Text, that where it came from it would have
been rewritten a thousand times and everything that was left from its origin
would be the word “and” and the Little Blind Text should turn around and return
to its own, safe country. But nothing the copy said could convince her and so it
didn’t take long until a few insidious Copy Writers ambushed her, made her drunk
with Longe and Parole and dragged her into their agency, where they abused her
for their projects again and again.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My Second Post!]]></title><description><![CDATA[Wow! I love blogging so much already. Did you know that “despite its name, salted duck eggs can also be made from
chicken eggs, though the…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/my-second-post/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/my-second-post/</guid><pubDate>Wed, 06 May 2015 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;Wow! I love blogging so much already.&lt;/p&gt;
&lt;p&gt;Did you know that “despite its name, salted duck eggs can also be made from
chicken eggs, though the taste and texture will be somewhat different, and the
egg yolk will be less rich.”?
(&lt;a href=&quot;http://en.wikipedia.org/wiki/Salted_duck_egg&quot;&gt;Wikipedia Link&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Yeah, I didn’t either.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Webscraping in Python with Flask and BeautifulSoup 4]]></title><description><![CDATA[What is web scraping? Web scraping is a term used for the process of extracting HTML/XML data from websites. Once extracted, it can be…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/hello-world/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/hello-world/</guid><pubDate>Mon, 23 Mar 2015 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/vlb3nw2civ5iyd3ats4w.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;What is web scraping?&lt;/h2&gt;
&lt;p&gt;Web scraping is a term used for the process of extracting HTML/XML data from websites. Once extracted, it can be parsed into a different HTML file or saved locally in text/spreadsheet documents.&lt;/p&gt;
&lt;h2&gt;Who does it?&lt;/h2&gt;
&lt;p&gt;A lot of websites that aggregate data from other websites on the internet. Some examples could be websites that give you the best deals on the same product after comparing across multiple platforms (Amazon, Flipkart, Ebay, etc.), and also sites that collect datasets to apply ML algorithms to.&lt;/p&gt;
&lt;h2&gt;How is it useful to me?&lt;/h2&gt;
&lt;p&gt;I would recommend you to limit your thinking to how something could benefit you especially when you know little to nothing about it. It helps to be a generalist when you’re just starting out. Learn everything, you never know when you’ll need it! You can always settle and specialize in one area eventually, when you’re well aware of the options you have.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What we’ll need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python v3.6.8&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installing Python (skip if already installed)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to — python.org &gt; Downloads &gt; Windows&lt;/li&gt;
&lt;li&gt;Scroll to version 3.6.8 &gt; x86 (32 bit) / x86–64 (64 bit) &gt; Executable&lt;/li&gt;
&lt;li&gt;Double-click and check “Add Python to PATH”&lt;/li&gt;
&lt;li&gt;Follow the installation instructions.&lt;/li&gt;
&lt;li&gt;Check if correctly installed&lt;/li&gt;
&lt;li&gt;Press Windows key+R &gt; Type “cmd” to open the command line.&lt;/li&gt;
&lt;li&gt;In the command line &gt; Type,&lt;/li&gt;
&lt;li&gt;python —version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If Python is installed correctly, you should see, &lt;code class=&quot;language-text&quot;&gt;3.6.8&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;h2&gt;Installing VSCode (skip if already installed)&lt;/h2&gt;
&lt;p&gt;VSCode is a free code editor with lots of features that make writing and debugging code much easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to code.visualstudio.com &gt; Download for Windows &gt; x86/x64 &gt; Installer.&lt;/li&gt;
&lt;li&gt;Double-click and follow the instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Let’s begin!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a new folder and call it “Webscraper”&lt;/li&gt;
&lt;li&gt;Inside the folder, create a new file named webscraper.py&lt;/li&gt;
&lt;li&gt;Open VSCode &gt; File &gt; Open Folder &gt; Navigate to “Webscraper”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we need to import a few libraries which will help us build our web scraper.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to Terminal &gt; New Terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is basically the command line but within the editor so we don’t have to have two windows and keep switching between them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next we call &lt;code class=&quot;language-text&quot;&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;You could call it the Alfred to Python’s Batman. Hehe.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In your terminal, type &lt;code class=&quot;language-text&quot;&gt;pip install beautifulsoup4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This installs the beautifulsoup library which will help us scrape webpages.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next type &lt;code class=&quot;language-text&quot;&gt;pip install flask&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;pip install requests&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Flask is a lightweight framework to build websites. We’ll use this to parse our collected data and display it as HTML in a new HTML file.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The requests module allows us to send http requests to the website we want to scrape.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In your file, type the following code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    from flask import Flask, render_template
    from bs4 import BeautifulSoup
    import requests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The first line imports the Flask class and the render_template method from the flask library. The second line imports the BeautifulSoup class, and the third line imports the requests module from our Python library.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next, we declare a variable which will hold the result of our request&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    source = requests.get(‘https://webscraper.droppages.com/&amp;#39;).text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We send a &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt; request to &lt;a href=&quot;https://webscraper.droppages.com&quot;&gt;https://webscraper.droppages.com&lt;/a&gt; and convert the HTML to plain text and store that in the &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;Next we declare a &lt;code class=&quot;language-text&quot;&gt;soup&lt;/code&gt; variable and store the value we get after passing &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;BS&lt;/code&gt;. ‘lxml’ is the markup we want our rendered code to have.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    soup = BeautifulSoup(source, &amp;#39;lxml&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, we have our code working. You can check it out by passing soup to a print function, like this &lt;code class=&quot;language-text&quot;&gt;print(soup)&lt;/code&gt; after the previous line and running &lt;code class=&quot;language-text&quot;&gt;python webscraper.py&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Right now, we are pulling the entire web page rather than specific elements on it. To get specific elements, you can try these by yourself.&lt;/p&gt;
&lt;p&gt;But before you do that, you should be aware of what exactly you want to get. You can either run the last command again or open the web page in the browser and inspect it by right clicking on the page. Some knowledge of HTML DOM and CSS is required here. You can head over to &lt;a href=&quot;https://www.w3schools.com&quot;&gt;W3Schools&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US&quot;&gt;MDN&lt;/a&gt; for a quick crash course on both.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;variable&amp;gt; = soup.find(&amp;#39;&amp;lt;HTML_element_name&amp;gt;&amp;#39;)
    &amp;lt;variable&amp;gt; = soup.find(&amp;#39;&amp;lt;HTML_element_name&amp;gt;&amp;#39;).select_one(&amp;#39;child_element&amp;#39;)
    &amp;lt;variable&amp;gt; = soup.find(&amp;#39;&amp;lt;HTML_element_name&amp;gt;&amp;#39;).find_all(&amp;#39;child_element&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;You can pass regular CSS notation in the brackets to be more specific about the elements you want.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, we are only actually just outputting HTML along with the text inside it. What if we just want the text?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s easy.&lt;/p&gt;
&lt;p&gt;We simply pass &lt;code class=&quot;language-text&quot;&gt;.text&lt;/code&gt; at the end of it. Just like we did with &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt;. Here’s an example.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    head = soup.find(‘main’).select_one(‘article:nth-of-type(4)’).div.text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Here, we tell Python to store the text of the div in the 4th article element which is in the main element, in the head variable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can check the output by passing head to &lt;code class=&quot;language-text&quot;&gt;print()&lt;/code&gt; and running &lt;code class=&quot;language-text&quot;&gt;python webscraper.py&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;p&gt;Try getting the names of one of the authors if you can.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can get an author like this,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    author = soup.find(‘main’).select_one(‘p’).text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Notice how you also get the date along with the name. That’s because both of them share the same element. There is a way to get the author name separately by using Python string methods like &lt;code class=&quot;language-text&quot;&gt;split&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;slice&lt;/code&gt;. But we won’t cover that here.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Next up, we will use flask to re-render our received data the way we want on a local server.&lt;/p&gt;
&lt;p&gt;In your file, type the following code,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    app = Flask(__name__)
    @app.route(&amp;#39;/&amp;#39;)
    def index():
       return render_template(&amp;#39;index.html,**locals())
    app.run(debug=True)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new templates folder in your main webscraper folder and call it &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The flask part is a little complicated to explain but to put it simply, we created a simple server that will take our &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt; from the templates folder and serve it on a local server — &lt;code class=&quot;language-text&quot;&gt;localhost://5000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, we can combine multiple variables we declared in all the previous code using soup and pass the text to our HTML and use CSS to style them the way we want!&lt;/p&gt;
&lt;p&gt;You can use this code for the &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt; file,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang=”en”&amp;gt;
     &amp;lt;head&amp;gt;
      &amp;lt;meta charset=”UTF-8&amp;quot;&amp;gt;
      &amp;lt;meta name=”viewport” content=”width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
      &amp;lt;meta http-equiv=”X-UA-Compatible” content=”ie=edge”&amp;gt;
      &amp;lt;title&amp;gt;Webscraper in Python using Flask&amp;lt;/title&amp;gt;
     &amp;lt;/head&amp;gt;
     &amp;lt;body&amp;gt;
      &amp;lt;!-- Variables from Flask here --&amp;gt;
     &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can use all the code we learned so far to create custom variables and pull specific data from our site. If we are well versed with the structure of our target site, we can use shortcuts like these.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    head = soup.header.h1.text

    second_author = soup.main.select_one(‘article:nth-of-type(2)’).p.text

    first_article = soup.main.article.div&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Type these inside the &lt;code class=&quot;language-text&quot;&gt;index()&lt;/code&gt; function that we created, just above the return statement.&lt;/li&gt;
&lt;li&gt;Save the file&lt;/li&gt;
&lt;li&gt;Go to index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we’ll pass these variables into our HTML while it gets rendered so we can see the data on our webpage.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang=”en”&amp;gt;
     &amp;lt;head&amp;gt;
      &amp;lt;meta charset=”UTF-8&amp;quot;&amp;gt;
      &amp;lt;meta name=”viewport” content=”width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
      &amp;lt;meta http-equiv=”X-UA-Compatible” content=”ie=edge”&amp;gt;
      &amp;lt;title&amp;gt;Webscraper in Python using Flask&amp;lt;/title&amp;gt;
     &amp;lt;/head&amp;gt;
     &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;{{ head }}&amp;lt;/div&amp;gt;
      &amp;lt;p&amp;gt;{{ second_author }}&amp;lt;/p&amp;gt;
      &amp;lt;article&amp;gt;{{ first_article }}&amp;lt;/article&amp;gt;
     &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now open the terminal and run &lt;code class=&quot;language-text&quot;&gt;python webscraper.py&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Aand we did it!&lt;/h3&gt;
&lt;p&gt;If you’re wondering how it’s so easy, well, it’s not. This was just a single page, and a simple one at that, with no classes or IDs added to the HTML. But this is a good start.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wonder how you can scrape multiple pages?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The answer is multiple &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;while&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;try&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;except&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;if-else&lt;/code&gt; loops!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hello, this was my very first technical article. If you find any errors in the code or the way I approached the tutorial, feel free to correct me. I’m excited to be part of this community as I grow with it and intend to contribute meaningful content. Thank you for reading!&lt;/p&gt;</content:encoded></item></channel></rss>