<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blaze codes]]></title><description><![CDATA[My own sweet spot on the internet]]></description><link>https://blazephoenix.github.io/blog</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 06 Jan 2020 17:25:48 GMT</lastBuildDate><item><title><![CDATA[Consuming an API in Svelte]]></title><description><![CDATA[I’d been figuring out Svelte since a week now and saying that I’ve fallen in love with it would be an understatement. Everything is so much…]]></description><link>https://blazephoenix.github.io/blog/consuming-api-in-svelte/</link><guid isPermaLink="false">https://blazephoenix.github.io/blog/consuming-api-in-svelte/</guid><pubDate>Fri, 20 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’d been figuring out Svelte since a week now and saying that I’ve fallen in love with it would be an understatement. Everything is so much faster to do and easier to understand that you’ll probably see me becoming an unofficial evangelist for it. To be honest, React was difficult for me to grasp and it took me atleast a month of trying it out on and off before I was comfortable with it. It was only after the introduction of hooks that I was able to use it better. With Svelte though, here I am writing an article about it after fiddling with it for just over a week!&lt;/p&gt;
&lt;p&gt;Without further ado, here we go!&lt;/p&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;Assuming you have Node installed on your system, enter the following in your command line, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx degit sveltejs/template numberfacts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This uses the template from the official Svelte repository on Github and provides us with a ready to use Hello World project. Once that is done, &lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; into your directory and run &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;. It should install all the packages that Svelte needs to run your project. If you followed it right, &lt;code class=&quot;language-text&quot;&gt;npm run dev&lt;/code&gt; should serve your project up on localhost:5000.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/jqw1hzw6tm6kms5v7e31.png&quot; alt=&quot;Svelte Hello World&quot;&gt;&lt;/p&gt;
&lt;h1&gt;What we’re making&lt;/h1&gt;
&lt;p&gt;We’ll be using the &lt;a href=&quot;http://numberapi.com&quot;&gt;Numbers API&lt;/a&gt; as our endpoint to generate random facts about any number our user enters.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;This is what our directory structure looks like - &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules
public
src
--app.svelte
--main.js
package.json
package-lock.json
README.md
rollup.config.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ignored the contents of the folders and have only focused on the ones we will be working with. In the &lt;code class=&quot;language-text&quot;&gt;main.js&lt;/code&gt; file, remove the &lt;code class=&quot;language-text&quot;&gt;props: &amp;#39;World&amp;#39;&lt;/code&gt; part and replace the contents of the &lt;code class=&quot;language-text&quot;&gt;App.svelte&lt;/code&gt; file with the following code,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;
	let query = &amp;quot;&amp;quot;;
	let result;

	async function getResult() {

		let response = await fetch(`http://numbersapi.com/${query}`);
		let text = await response.text();
		let data = text;
		return data;
	}

	function submitHandler(e) {
		result = getResult();
	}
&amp;lt;/script&amp;gt;

&amp;lt;div class=&amp;quot;container mt-5&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
		&amp;lt;div class=&amp;quot;col-md&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-8 text-center&amp;quot;&amp;gt;
			&amp;lt;h1 class=&amp;quot;display-4&amp;quot;&amp;gt;Random Number Facts&amp;lt;/h1&amp;gt;
			&amp;lt;form class=&amp;quot;form-inline&amp;quot; on:submit|preventDefault={submitHandler}&amp;gt;
				&amp;lt;input class=&amp;quot;w-75 form-control&amp;quot; type=&amp;quot;number&amp;quot; bind:value={query}&amp;gt;
				&amp;lt;button class=&amp;quot;w-25 btn btn-dark&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
			&amp;lt;/form&amp;gt;

			{#if result===undefined}

			&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;

			{:else}

			{#await result}

			&amp;lt;p&amp;gt;Loading...&amp;lt;/p&amp;gt;

			{:then value}

			{value}

			{:catch error}

			{error.message}
				
			{/await}

			{/if}
		&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;col-md&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What is happening here?&lt;/h2&gt;
&lt;p&gt;In Svelte, an application is composed from one or more components. A component is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written into a &lt;code class=&quot;language-text&quot;&gt;.svelte&lt;/code&gt; file. The ‘hello world’ example we currently have is a simple component.&lt;/p&gt;
&lt;p&gt;In the code above, we are only using HTML and Javascript and letting Bootstrap take care of the CSS for us.&lt;/p&gt;
&lt;p&gt;We initialize a &lt;code class=&quot;language-text&quot;&gt;query&lt;/code&gt; string which we bind to the value of input using &lt;code class=&quot;language-text&quot;&gt;bind:value={query}&lt;/code&gt;. The curly brackets indicate that we are using JS variables inside HTML. Next, we declare a &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt; variable that will store the result of our request when we send it.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;onSubmitHandler()&lt;/code&gt; runs when the user enters a number in the input. We assign the return value of &lt;code class=&quot;language-text&quot;&gt;getResult()&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt; here. &lt;code class=&quot;language-text&quot;&gt;getResult()&lt;/code&gt; performs an async fetch request and returns the response.&lt;/p&gt;
&lt;p&gt;On to the HTML part, Svelte provides a lot of functionality out of the box which is very helpful. The &lt;code class=&quot;language-text&quot;&gt;on:submit&lt;/code&gt; directive is the Svelte version of the event listener in Javascript. We assign it the &lt;code class=&quot;language-text&quot;&gt;onSubmitHandler()&lt;/code&gt; function when the user presses ‘Submit’.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;{#await}&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;{:then}&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;{:catch}&lt;/code&gt; blocks are used to resolve promises on the rendered component. The &lt;code class=&quot;language-text&quot;&gt;{#if}&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;{:else}&lt;/code&gt; block as you may have guessed is a conditional block.&lt;/p&gt;
&lt;h2&gt;Creating a Card component&lt;/h2&gt;
&lt;p&gt;Next, we will create a new component that will render the content we get from the fetch request. Create a new file in the same directory and call it &lt;code class=&quot;language-text&quot;&gt;Card.svelte&lt;/code&gt;. Add the following code in &lt;code class=&quot;language-text&quot;&gt;Card.svelte&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;
export let data;
&amp;lt;/script&amp;gt;
    
&amp;lt;div class=&amp;quot;card mt-5&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;card-body&amp;quot;&amp;gt;
        &amp;lt;h5 class=&amp;quot;card-title&amp;quot;&amp;gt;{data}&amp;lt;/h5&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one is pretty small. Here we simply write how we want our card to look like and where we want the rendered data to be. We use &lt;code class=&quot;language-text&quot;&gt;export let data&lt;/code&gt; to let our main &lt;code class=&quot;language-text&quot;&gt;App.svelte&lt;/code&gt; component use this variable to pass props down to our card. The syntax is a little weird in places, but you will get used to it. Just remember that Svelte is not Javascript. It’s a compiler for Javascript which builds to vanilla Javascript in production.&lt;/p&gt;
&lt;p&gt;Now, we have to make some changes in our &lt;code class=&quot;language-text&quot;&gt;App.svelte&lt;/code&gt; component to render our card. First, add this line in the script tag on top,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Card from &amp;#39;./Card.svelte&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can add the card component as an HTML tag and pass down the result of our request to it as a prop, like so,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{#if result===undefined}

 &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;

{:else}

&amp;lt;p&amp;gt;Loading...&amp;lt;/p&amp;gt;

{#await result}

{:then value}

 &amp;lt;Card data={value} /&amp;gt;

{:catch error}

 &amp;lt;Card data={error.message}/&amp;gt;
				
{/await}

{/if}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aand, that’s pretty much it! You should be able to enter a number and have a result rendered on your screen. There are other minor things you can do, such as clearing the input field once a number is entered and adding a spinner instead of the loading p tag that we have right now. Svelte provides some &lt;a href=&quot;https://svelte.dev/docs#svelte_transition&quot;&gt;animations and transitions&lt;/a&gt; out of the box too!&lt;/p&gt;
&lt;p&gt;TL;DR Take me to the code:
&lt;a href=&quot;https://github.com/Blazephoenix/numberfacts&quot;&gt;Blazephoenix/numberfacts&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Why learning to program is like owning a dog (in some ways)]]></title><description><![CDATA[So I just recently got a White German Shepherd pup, and within a few days of being with him, I’ve come to realize that owning a dog is not…]]></description><link>https://blazephoenix.github.io/blog/why-learning-program-like-owning-dog/</link><guid isPermaLink="false">https://blazephoenix.github.io/blog/why-learning-program-like-owning-dog/</guid><pubDate>Fri, 06 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;So I just recently got a White German Shepherd pup, and within a few days of being with him, I’ve come to realize that owning a dog is not an easy thing. But then, neither is programming. So here are some parallels I drew from that. Just a fun post :)&lt;/p&gt;
&lt;h1&gt;You don’t know whether you can do it&lt;/h1&gt;
&lt;p&gt;My first language was JavaScript, and when I started to learn, I had no idea whether I could make a website. My motivation didn’t matter because.. motivation only gets you started. It’s the same with owning a dog, you don’t know if you can own and care for one, but you want one, so you get a dog. And then you are clueless about what to do next.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/xkvttzvWDPMEEXAJB1/source.gif&quot;&gt;&lt;/p&gt;
&lt;h1&gt;You have to take it one day at a time&lt;/h1&gt;
&lt;p&gt;Owning a dog is a lot of responsibility. And if you think of the big picture, you can end up scaring yourself shitless. There’s a lot to learn on how to discipline your dog, what to buy, when to vaccinate, vet schedules, and so on. It’s the same with programming, there is a whole lot to learn with no end in sight. So, it’s important to know that at this point, you don’t need to learn everything on day one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media1.giphy.com/media/8YHtCyo0hT7ThZSsnN/giphy.gif?cid=19f5b51a7492d4b5cecc60a446512c87f066c74617c382d2&amp;#x26;rid=giphy.gif&quot;&gt;&lt;/p&gt;
&lt;h1&gt;You can’t ignore the ugly parts&lt;/h1&gt;
&lt;p&gt;Programming is a mentally stimulating activity where you get to learn new things all the time. And we all have a preference for a particular part of it, frontend, backend, fullstack, database, application development, these are just the broader parts of it. And you can go even deeper than that in terms of job titles. But even then, sometimes a part of your job will require you to have some idea of the others too, even if you don’t like to do them. Owning a dog means you get to play with it, pet it, go out on walks, have a furry companion who would trust you with their eyes closed, but it also means having to clean up after them, regular vet visits, partly chewed furniture, and so on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/3Mi9k7Y5gHMmZv0lin/source.gif&quot;&gt;&lt;/p&gt;
&lt;h1&gt;You can’t slack off&lt;/h1&gt;
&lt;p&gt;That said, programming is a very demanding field where you have to always keep abreast of the happenings. I remember not coding for about half a year and feeling like a complete newbie because Angular was replaced by React and you could suddenly make apps with web technologies. Your dog is also very demanding by nature, you have to be alert at all times so he doesn’t do something you wouldn’t want him to, like poop on the carpet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media0.giphy.com/media/lcdMStZJGXPSmu8a5c/giphy.gif?cid=19f5b51a066254358a2b81fb91f7d0b3dd7f374a30e19482&amp;#x26;rid=giphy.gif&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Inspite of everything, it’s fun and you love it&lt;/h1&gt;
&lt;p&gt;At the end of the day though, it’s still a lot of fun to make things and to have a furball to play with after an eventful day, and you wouldn’t want it any other way.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media0.giphy.com/media/s2qXK8wAvkHTO/giphy.gif?cid=19f5b51a5f3b2af874dad4f18477d4da7a186008681223c7&amp;#x26;rid=giphy.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;That’s all folks!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Sass mixins for Flexbox]]></title><description><![CDATA[CSS and HTML I was scouring the internet for a good mixin for flexbox but I would always come across mixins like these, with a mixin for…]]></description><link>https://blazephoenix.github.io/blog/flexbox-scss-mixins/</link><guid isPermaLink="false">https://blazephoenix.github.io/blog/flexbox-scss-mixins/</guid><pubDate>Thu, 03 Oct 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.pexels.com/photos/160107/pexels-photo-160107.jpeg?auto=compress&amp;#x26;cs=tinysrgb&amp;#x26;dpr=2&amp;#x26;h=650&amp;#x26;w=940&quot; alt=&quot;CSS and HTML&quot;&gt;&lt;/p&gt;
&lt;p&gt;I was scouring the internet for a good mixin for flexbox but I would always come across mixins like these,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with a mixin for every possible property,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this may work for a lot of people, I still felt that it could be made simpler, or “DRY’er”. I’m pretty sure someone must have done something like this before, but I couldn’t find it. So after a little bit of struggling around with SCSS mixins and functions, I came up with this &lt;a href=&quot;https://gist.github.com/Blazephoenix/aca2ab809fa44937f51452ce64b922c5#file-flexbox-mixins-scss&quot; title=&quot;Flexbox mixins for SASS&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More functions can be created and extended into the mixin such as flex-direction, flex-wrap, flex-grow, etc. with the @content directive in a similar way. It can also be used on properties that use the same values like justify-self or align-self. I will be updating this post with a github repo for all the functions and mixins soon.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Would love to know if anyone finds it useful. Thanks.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Webscraping in Python Flask and BeautifulSoup 4]]></title><description><![CDATA[What is web scraping? Web scraping is a term used for the process of extracting HTML/XML data from websites. Once extracted, it can be…]]></description><link>https://blazephoenix.github.io/blog/webscraping-in-python-flask-bs4/</link><guid isPermaLink="false">https://blazephoenix.github.io/blog/webscraping-in-python-flask-bs4/</guid><pubDate>Tue, 05 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/vlb3nw2civ5iyd3ats4w.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;What is web scraping?&lt;/h2&gt;
&lt;p&gt;Web scraping is a term used for the process of extracting HTML/XML data from websites. Once extracted, it can be parsed into a different HTML file or saved locally in text/spreadsheet documents.&lt;/p&gt;
&lt;h2&gt;Who does it?&lt;/h2&gt;
&lt;p&gt;A lot of websites that aggregate data from other websites on the internet. Some examples could be websites that give you the best deals on the same product after comparing across multiple platforms (Amazon, Flipkart, Ebay, etc.), and also sites that collect datasets to apply ML algorithms to.&lt;/p&gt;
&lt;h2&gt;How is it useful to me?&lt;/h2&gt;
&lt;p&gt;I would recommend you to limit your thinking to how something could benefit you especially when you know little to nothing about it. It helps to be a generalist when you’re just starting out. Learn everything, you never know when you’ll need it! You can always settle and specialize in one area eventually, when you’re well aware of the options you have.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What we’ll need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python v3.6.8&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installing Python (skip if already installed)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to — python.org &gt; Downloads &gt; Windows&lt;/li&gt;
&lt;li&gt;Scroll to version 3.6.8 &gt; x86 (32 bit) / x86–64 (64 bit) &gt; Executable&lt;/li&gt;
&lt;li&gt;Double-click and check “Add Python to PATH”&lt;/li&gt;
&lt;li&gt;Follow the installation instructions.&lt;/li&gt;
&lt;li&gt;Check if correctly installed&lt;/li&gt;
&lt;li&gt;Press Windows key+R &gt; Type “cmd” to open the command line.&lt;/li&gt;
&lt;li&gt;In the command line &gt; Type,&lt;/li&gt;
&lt;li&gt;python —version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If Python is installed correctly, you should see, &lt;code class=&quot;language-text&quot;&gt;3.6.8&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;h2&gt;Installing VSCode (skip if already installed)&lt;/h2&gt;
&lt;p&gt;VSCode is a free code editor with lots of features that make writing and debugging code much easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to code.visualstudio.com &gt; Download for Windows &gt; x86/x64 &gt; Installer.&lt;/li&gt;
&lt;li&gt;Double-click and follow the instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Let’s begin!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a new folder and call it “Webscraper”&lt;/li&gt;
&lt;li&gt;Inside the folder, create a new file named webscraper.py&lt;/li&gt;
&lt;li&gt;Open VSCode &gt; File &gt; Open Folder &gt; Navigate to “Webscraper”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we need to import a few libraries which will help us build our web scraper.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to Terminal &gt; New Terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is basically the command line but within the editor so we don’t have to have two windows and keep switching between them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next we call &lt;code class=&quot;language-text&quot;&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;You could call it the Alfred to Python’s Batman. Hehe.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In your terminal, type &lt;code class=&quot;language-text&quot;&gt;pip install beautifulsoup4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This installs the beautifulsoup library which will help us scrape webpages.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next type &lt;code class=&quot;language-text&quot;&gt;pip install flask&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;pip install requests&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Flask is a lightweight framework to build websites. We’ll use this to parse our collected data and display it as HTML in a new HTML file.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The requests module allows us to send http requests to the website we want to scrape.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In your file, type the following code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    from flask import Flask, render_template
    from bs4 import BeautifulSoup
    import requests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The first line imports the Flask class and the render_template method from the flask library. The second line imports the BeautifulSoup class, and the third line imports the requests module from our Python library.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next, we declare a variable which will hold the result of our request&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    source = requests.get(‘https://webscraper.droppages.com/&amp;#39;).text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We send a &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt; request to &lt;a href=&quot;https://webscraper.droppages.com&quot;&gt;https://webscraper.droppages.com&lt;/a&gt; and convert the HTML to plain text and store that in the &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;Next we declare a &lt;code class=&quot;language-text&quot;&gt;soup&lt;/code&gt; variable and store the value we get after passing &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;BS&lt;/code&gt;. ‘lxml’ is the markup we want our rendered code to have.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    soup = BeautifulSoup(source, &amp;#39;lxml&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, we have our code working. You can check it out by passing soup to a print function, like this &lt;code class=&quot;language-text&quot;&gt;print(soup)&lt;/code&gt; after the previous line and running &lt;code class=&quot;language-text&quot;&gt;python webscraper.py&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Right now, we are pulling the entire web page rather than specific elements on it. To get specific elements, you can try these by yourself.&lt;/p&gt;
&lt;p&gt;But before you do that, you should be aware of what exactly you want to get. You can either run the last command again or open the web page in the browser and inspect it by right clicking on the page. Some knowledge of HTML DOM and CSS is required here. You can head over to &lt;a href=&quot;https://www.w3schools.com&quot;&gt;W3Schools&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US&quot;&gt;MDN&lt;/a&gt; for a quick crash course on both.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;variable&amp;gt; = soup.find(&amp;#39;&amp;lt;HTML_element_name&amp;gt;&amp;#39;)
    &amp;lt;variable&amp;gt; = soup.find(&amp;#39;&amp;lt;HTML_element_name&amp;gt;&amp;#39;).select_one(&amp;#39;child_element&amp;#39;)
    &amp;lt;variable&amp;gt; = soup.find(&amp;#39;&amp;lt;HTML_element_name&amp;gt;&amp;#39;).find_all(&amp;#39;child_element&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;You can pass regular CSS notation in the brackets to be more specific about the elements you want.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, we are only actually just outputting HTML along with the text inside it. What if we just want the text?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s easy.&lt;/p&gt;
&lt;p&gt;We simply pass &lt;code class=&quot;language-text&quot;&gt;.text&lt;/code&gt; at the end of it. Just like we did with &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt;. Here’s an example.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    head = soup.find(‘main’).select_one(‘article:nth-of-type(4)’).div.text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Here, we tell Python to store the text of the div in the 4th article element which is in the main element, in the head variable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can check the output by passing head to &lt;code class=&quot;language-text&quot;&gt;print()&lt;/code&gt; and running &lt;code class=&quot;language-text&quot;&gt;python webscraper.py&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;p&gt;Try getting the names of one of the authors if you can.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can get an author like this,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    author = soup.find(‘main’).select_one(‘p’).text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Notice how you also get the date along with the name. That’s because both of them share the same element. There is a way to get the author name separately by using Python string methods like &lt;code class=&quot;language-text&quot;&gt;split&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;slice&lt;/code&gt;. But we won’t cover that here.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Next up, we will use flask to re-render our received data the way we want on a local server.&lt;/p&gt;
&lt;p&gt;In your file, type the following code,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    app = Flask(__name__)
    @app.route(&amp;#39;/&amp;#39;)
    def index():
       return render_template(&amp;#39;index.html,**locals())
    app.run(debug=True)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new templates folder in your main webscraper folder and call it &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The flask part is a little complicated to explain but to put it simply, we created a simple server that will take our &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt; from the templates folder and serve it on a local server — &lt;code class=&quot;language-text&quot;&gt;localhost://5000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, we can combine multiple variables we declared in all the previous code using soup and pass the text to our HTML and use CSS to style them the way we want!&lt;/p&gt;
&lt;p&gt;You can use this code for the &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt; file,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang=”en”&amp;gt;
     &amp;lt;head&amp;gt;
      &amp;lt;meta charset=”UTF-8&amp;quot;&amp;gt;
      &amp;lt;meta name=”viewport” content=”width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
      &amp;lt;meta http-equiv=”X-UA-Compatible” content=”ie=edge”&amp;gt;
      &amp;lt;title&amp;gt;Webscraper in Python using Flask&amp;lt;/title&amp;gt;
     &amp;lt;/head&amp;gt;
     &amp;lt;body&amp;gt;
      &amp;lt;!-- Variables from Flask here --&amp;gt;
     &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can use all the code we learned so far to create custom variables and pull specific data from our site. If we are well versed with the structure of our target site, we can use shortcuts like these.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    head = soup.header.h1.text

    second_author = soup.main.select_one(‘article:nth-of-type(2)’).p.text

    first_article = soup.main.article.div&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Type these inside the &lt;code class=&quot;language-text&quot;&gt;index()&lt;/code&gt; function that we created, just above the return statement.&lt;/li&gt;
&lt;li&gt;Save the file&lt;/li&gt;
&lt;li&gt;Go to index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we’ll pass these variables into our HTML while it gets rendered so we can see the data on our webpage.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang=”en”&amp;gt;
     &amp;lt;head&amp;gt;
      &amp;lt;meta charset=”UTF-8&amp;quot;&amp;gt;
      &amp;lt;meta name=”viewport” content=”width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
      &amp;lt;meta http-equiv=”X-UA-Compatible” content=”ie=edge”&amp;gt;
      &amp;lt;title&amp;gt;Webscraper in Python using Flask&amp;lt;/title&amp;gt;
     &amp;lt;/head&amp;gt;
     &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;{{ head }}&amp;lt;/div&amp;gt;
      &amp;lt;p&amp;gt;{{ second_author }}&amp;lt;/p&amp;gt;
      &amp;lt;article&amp;gt;{{ first_article }}&amp;lt;/article&amp;gt;
     &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now open the terminal and run &lt;code class=&quot;language-text&quot;&gt;python webscraper.py&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Aand we did it!&lt;/h3&gt;
&lt;p&gt;If you’re wondering how it’s so easy, well, it’s not. This was just a single page, and a simple one at that, with no classes or IDs added to the HTML. But this is a good start.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wonder how you can scrape multiple pages?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The answer is multiple &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;while&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;try&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;except&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;if-else&lt;/code&gt; loops!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hello, this was my very first technical article. If you find any errors in the code or the way I approached the tutorial, feel free to correct me. I’m excited to be part of this community as I grow with it and intend to contribute meaningful content. Thank you for reading!&lt;/p&gt;</content:encoded></item></channel></rss>